-- 레벨 : 02.lvl
-- 행 크기: 4  열 크기: 7
-- 테세우스위치: 203
-- 미노타르위치: 201
-- 골위치      : 402
MODULE main
VAR
red: { 101, 102, 103, 104, 105, 106, 107, 201, 202, 203, 204, 205, 206, 207, 301, 302, 303, 304, 305, 306, 307, 401, 402, 403, 404, 405, 406, 407 };
black: { 101, 102, 103, 104, 105, 106, 107, 201, 202, 203, 204, 205, 206, 207, 301, 302, 303, 304, 305, 306, 307, 401, 402, 403, 404, 405, 406, 407 };
turn : boolean;


DEFINE
notLeft := black=101 | black=201 | black=202 | black=203 | black=301 | black=306 | black=307 | black=401;
-- fill here : 스테이지 인코딩
notRight := black=107 | black=207 | black=307 | black=407 | black=201 | black=202 | black=305 | black=306;
notUp := black=101 | black=102 | black=103 | black=104 | black=105 | black=106 | black=107 | black=302 | black=406;
notDown := black=401 | black=402 | black=403 | black=404 | black=405 | black=406 | black=407 | black=202 | black=306;

notLeftT := red=101 | red=201 | red=202 | red=203 | red=301 | red=306 | red=307 | red=401;
notRightT := red=107 | red=207 | red=307 | red=407 | red=201 | red=202 | red=305 | red=306;
notUpT := red=101 | red=102 | red=103 | red=104 | red=105 | red=106 | red=107 | red=302 | red=406;
notDownT := red=401 | red=402 | red=403 | red=404 | red=405 | red=406 | red=407 | red=202 | red=306;
-- 계단 안을 거치거나 들어갈 수 있다는 가정하에 인코딩

redStart := 203;
redGoal := 402;
blkStart := 201;

ASSIGN
init(turn) := TRUE;
next(turn) := !turn;
init(red) := redStart;
-- fill here : 테세우스 움직임
next(red) :=  case

-- 상하좌우 모두 움직일 수 있다
(!notUpT) & (!notDownT) & (!notLeftT) & (!notRightT) & (turn): {red - 100, red + 100, red - 1, red + 1};

-- 한면이 막혀있다
(!notUpT) & (!notDownT) & (!notLeftT) & (turn): {red - 100, red + 100, red - 1};
(!notUpT) & (!notDownT) & (!notRightT) & (turn): {red - 100, red + 100, red + 1};
(!notUpT) & (!notLeftT) & (!notRightT) & (turn): {red - 100, red - 1, red + 1};
(!notDownT) & (!notLeftT) & (!notRightT) & (turn): {red + 100, red - 1, red + 1};

-- 두면이 막혀있다
(!notUpT) & (!notDownT) & (turn): {red - 100, red + 100};
(!notUpT) & (!notLeftT)  & (turn): {red - 100, red - 1};
(!notUpT) & (!notRightT) & (turn): {red - 100, red + 1};
(!notDownT) & (!notLeftT) & (turn): {red + 100, red - 1};
(!notDownT) & (!notRightT) & (turn): {red + 100, red + 1};
(!notLeftT) & (!notRightT) & (turn): {red - 1, red + 1};

-- 세면이 막혀있다
(!notUpT) & (turn): {red - 100};
(!notDownT) & (turn): {red + 100};
(!notLeftT) & (turn): {red - 1};
(!notRightT) & (turn): {red + 1};

-- default. 맵이 인코딩 잘 되어있다면 turn 이 false일때 들어갈 것.
(red > 100): {red};
esac;

init(black) := blkStart;
-- fill here : 미노타우르스 움직임
-- 다음 red 위치 기준으로 판단 -> next(red)
next(black) :=  case
-- 테세우스가 오른쪽에 있다. & 오른쪽으로 갈 수 있다.
((next(red) mod 100)  > (black mod 100)) & (!notRight) : black + 1;
-- 테세우스가 왼쪽에 있다. & 왼쪽으로 갈 수 있다.
((next(red) mod 100)  < (black mod 100)) & (!notLeft) : black - 1;

-- 좌우로 움직일수 없고 (x위치 같거나, 가면 가까워지지만 막혀있을때) 
-- 테세우스가 위에 있다 & 위로 갈 수 있다.
(((next(red) mod 100) = (black mod 100)) |
(notLeft & ((next(red) mod 100)  < (black mod 100))) |
(notRight & ((next(red) mod 100)  > (black mod 100)))) &
((next(red) / 100) < (black / 100)) &
(!notUp) : black - 100;

-- 좌우로 움직일수 없고 (x위치 같거나, 가면 가까워지지만 막혀있을때) 
-- 테세우스가 아래에 있다 & 아래로 갈 수 있다.
(((next(red) mod 100)  = (black mod 100)) |
(notLeft & ((next(red) mod 100)  < (black mod 100))) |
(notRight & ((next(red) mod 100)  > (black mod 100)))) & 
((next(red) / 100) > (black / 100)) & 
(!notDown) : black + 100;

-- default
(black > 100): {black};
esac;
-- fill here
LTLSPEC -- fill here "goal일때까지 red가 black에게 잡히지 않는 상황은 전체적으로 없다" 
!G((!(red = black)) U (red = redGoal));
